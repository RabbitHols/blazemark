{"version":3,"sources":["my-first-worker/index.ts","App.tsx","serviceWorker.ts","index.tsx","App.hooks.ts"],"names":["module","exports","App","useState","value","setValue","total","useProcessMarkdownWithWorker","className","options","lineNumbers","lineWrapping","mode","tabSize","onChange","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","markdown","isCalculating","data","setData","workerApi","workerApiAndCleanup","useMemo","worker","Worker","name","wrap","cleanup","releaseProxy","terminate","makeWorkerApiAndCleanup","useEffect","useWorker","processMarkdownWithWorker"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,sD,qICiC5BC,G,kBAxBO,WAAO,IAAD,EACAC,mBAAS,QADT,mBACnBC,EADmB,KACZC,EADY,KAEpBC,EAAQC,YAA6BH,GAE3C,OACE,yBAAKI,UAAU,OACb,6BACE,kBAAC,aAAD,CACEJ,MAAM,OACNK,QAAS,CACPC,aAAa,EACbC,cAAc,EACdC,KAAM,WACNC,QAAS,GAEXC,SAAU,SAACV,EAAOK,GAChBJ,EAASD,OAGf,yBAAKW,wBAAyB,CAAEC,OAAQV,EAAMA,YChBhCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,uGEvIZ,SAASxB,EAA6ByB,GAAkB,MAErC7B,mBAAS,CAC/B8B,eAAe,EACf3B,MAAO,KAJoD,mBAEtD4B,EAFsD,KAEhDC,EAFgD,KAQrDC,EAgBV,WAGE,IAAMC,EAAsBC,mBAAQ,kBAiBtC,WAEE,IAAMC,EAAS,IAAIC,OAAO,EAAqB,CAC7CC,KAAM,oBAGFL,EAAYM,YAAiDH,GAUnE,MAF4B,CAAEH,YAAWO,QALzB,WACdP,EAAUQ,OACVL,EAAOM,cA5BiCC,KAA2B,IAWrE,OATAC,qBAAU,WAAO,IACPJ,EAAYN,EAAZM,QAGR,OAAO,WACLA,OAED,CAACN,IAEGA,EA9BeW,GAAdZ,UAYR,OAVAW,qBAAU,WAERZ,EAAQ,CAAEF,eAAe,EAAM3B,MAAO,KAEtC8B,EACGa,0BAA0BjB,GAE1BH,MAAK,SAACvB,GAAD,OAAW6B,EAAQ,CAAEF,eAAe,EAAO3B,MAAOA,SACzD,CAAC8B,EAAWD,EAASH,IAEjBE,K","file":"static/js/main.62ab4f42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/js/my-first-worker.e587806b.chunk.worker.js\"","import React, { useEffect, useState } from \"react\";\nimport { useProcessMarkdownWithWorker } from \"./App.hooks\";\nimport \"./App.css\";\n\nimport { Codemirror } from 'react-codemirror-ts';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/lib/codemirror.css';\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(\"# ok\")\n  const total = useProcessMarkdownWithWorker(value);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Codemirror\n          value=\"okkk\"\n          options={{\n            lineNumbers: true,\n            lineWrapping: true,\n            mode: 'markdown',\n            tabSize: 2,\n          }}\n          onChange={(value, options) => {\n            setValue(value)\n          }} />\n      </div>\n      <div dangerouslySetInnerHTML={{ __html: total.total }}></div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import { wrap, releaseProxy } from \"comlink\";\nimport { useEffect, useState, useMemo } from \"react\";\n\n/**\n * Our hook that performs the calculation on the worker\n */\nexport function useProcessMarkdownWithWorker(markdown: string) {\n  // We'll want to expose a wrapping object so we know when a calculation is in progress\n  const [data, setData] = useState({\n    isCalculating: false,\n    total: \"\",\n  });\n\n  // acquire our worker\n  const { workerApi } = useWorker();\n\n  useEffect(() => {\n    // We're starting the calculation here\n    setData({ isCalculating: true, total: \"\" });\n  \n    workerApi\n      .processMarkdownWithWorker(markdown)\n      // @ts-ignore: Unreachable code error\n      .then((total) => setData({ isCalculating: false, total: total })); // We receive the result here\n  }, [workerApi, setData, markdown]);\n\n  return data;\n}\n\n\nfunction useWorker() {\n  // memoise a worker so it can be reused; create one worker up front\n  // and then reuse it subsequently; no creating new workers each time\n  const workerApiAndCleanup = useMemo(() => makeWorkerApiAndCleanup(), []);\n\n  useEffect(() => {\n    const { cleanup } = workerApiAndCleanup;\n\n    // cleanup our worker when we're done with it\n    return () => {\n      cleanup();\n    };\n  }, [workerApiAndCleanup]);\n\n  return workerApiAndCleanup;\n}\n\n/**\n * Creates a worker, a cleanup function and returns it\n */\nfunction makeWorkerApiAndCleanup() {\n  // Here we create our worker and wrap it with comlink so we can interact with it\n  const worker = new Worker(\"./my-first-worker\", {\n    name: \"my-first-worker\",\n    type: \"module\"\n  });\n  const workerApi = wrap<import(\"./my-first-worker\").MarkdownWorker>(worker);\n\n  // A cleanup function that releases the comlink proxy and terminates the worker\n  const cleanup = () => {\n    workerApi[releaseProxy]();\n    worker.terminate();\n  };\n\n  const workerApiAndCleanup = { workerApi, cleanup };\n\n  return workerApiAndCleanup;\n}\n"],"sourceRoot":""}